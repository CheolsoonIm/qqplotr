% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stat_qq_line.R
\name{stat_qq_line}
\alias{stat_qq_line}
\title{Quantile-quantile line}
\usage{
stat_qq_line(data = NULL, mapping = NULL, geom = "path",
  position = "identity", show.legend = NA, inherit.aes = TRUE,
  distribution = "norm", dparams = list(), qtype = 7, probs = c(0.25,
  0.75), detrend = FALSE, ...)
}
\arguments{
\item{data}{The data to be displayed in this layer. There are three
   options:

   If \code{NULL}, the default, the data is inherited from the plot
   data as specified in the call to \code{\link{ggplot}}.

   A \code{data.frame}, or other object, will override the plot
   data. All objects will be fortified to produce a data frame. See
   \code{\link{fortify}} for which variables will be created.

   A \code{function} will be called with a single argument,
   the plot data. The return value must be a \code{data.frame.}, and
   will be used as the layer data.}

\item{mapping}{Set of aesthetic mappings created by \code{\link{aes}} or
\code{\link{aes_}}. If specified and \code{inherit.aes = TRUE} (the
default), it is combined with the default mapping at the top level of the
plot. You must supply \code{mapping} if there is no plot mapping.}

\item{geom}{The geometric object to use display the data}

\item{position}{Position adjustment, either as a string, or the result of
a call to a position adjustment function.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link{borders}}.}

\item{distribution}{Character. Distribution function to use, if \code{x} not
specified. Do not provide the full distribution function name (e.g.,
\code{"dnorm"}), instead, just use the shortened distribution name (e.g.,
\code{"norm"}). If you wish to provide a custom distribution, you may do so
by first creating the density and quantile functions following the standard
nomenclature from the \code{stats} package (e.g., for \code{"custom"},
create the \code{"dcustom"} and \code{"qcustom"} functions).}

\item{dparams}{List of additional parameters passed on to \code{distribution} function.}

\item{qtype}{Type of quantile computation used in \code{quantile}.}

\item{probs}{Numeric vector of length two, representing the quantiles used
to compute the Q-Q line.}

\item{detrend}{Logical. Should the plot of the points be detrended?}

\item{...}{other arguments passed on to \code{\link{layer}}. These are
often aesthetics, used to set an aesthetic to a fixed value, like
\code{color = "red"} or \code{size = 3}. They may also be parameters
to the paired geom/stat.}
}
\description{
Draws a quantile-quantile line.
}
\examples{
require(ggplot2)

# defaults to standard normal distribution, not detrended
gg <- ggplot(data = mtcars, mapping = aes(sample = mpg)) +
stat_qq_line() +
	stat_qq_points()
gg + labs(x = "theoretical", y = "sample")

# detrending the line and points
detrend <- TRUE
gg <- ggplot(data = mtcars, mapping = aes(sample = mpg)) +
stat_qq_line(detrend = detrend) +
	stat_qq_points(detrend = detrend)
gg + labs(x = "theoretical", y = "sample")

# deterended exponential distribution with rate = 1
detrend <- TRUE
distribution <- "exp"
gg <- ggplot(data = mtcars, mapping = aes(sample = mpg)) +
stat_qq_line(detrend = detrend, distribution = distribution) +
	stat_qq_points(detrend = detrend, distribution = distribution)
gg + labs(x = "theoretical", y = "sample")

# deterended poisson distribution with lambda = 7
detrend <- TRUE
distribution <- "pois"
dparams <- list(lambda = 7)
gg <- ggplot(data = mtcars, mapping = aes(sample = mpg)) +
stat_qq_line(detrend = detrend, distribution = distribution, dparams = dparams) +
	stat_qq_points(detrend = detrend, distribution = distribution, dparams = dparams)
gg + labs(x = "theoretical", y = "sample")

}
